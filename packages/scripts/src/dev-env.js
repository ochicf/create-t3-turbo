// @ts-check
import fs from "fs/promises";

/**
 * @typedef {() => string | Promise<string> | [string, ...[string, FallbackFn][]]} FallbackFn
 */

/**
 * @param {[string, FallbackFn][]} entries
 * @param {{
 *  log?: boolean,
 *  source?: string
 *  readme?: string
 *  title?: string,
 * }} options
 */
export function makeGetDevEnv(
  entries,
  {
    log = true,
    source = "/packages/scripts/src/dev-env.js",
    readme = "",
    title = `  Infering dev env variables from ${source}${readme && ` (see ${readme} for more info)`}:`,
  } = {},
) {
  return () => {
    /** @type [string, string][] */
    const fallbacks = [];
    return reduceEnvVarValues(entries, undefined, fallbacks).then(
      (result) => (
        log && fallbacks.length
          ? (console.log(title),
            fallbacks.forEach(([name, value]) =>
              console.log(`  - ${name}=${value}`),
            ))
          : void 0,
        result
      ),
    );
  };
}

/**
 * @param {[string, FallbackFn][]} entries
 * @param {Record<string, string> | undefined} result
 * @param {[string, string][]} fallbacks
 * @returns {Promise<Record<string, string>>}
 */
export async function reduceEnvVarValues(entries, result = {}, fallbacks = []) {
  return entries.reduce(async (accPromise, [name, fallbackFn]) => {
    const acc = await accPromise;
    // eslint-disable-next-line no-restricted-properties
    const envValue = process.env[name];
    const fallbackOrEntries = envValue ?? (await fallbackFn());
    const [fallbackValue, ...fallbackEntries] = Array.isArray(fallbackOrEntries)
      ? fallbackOrEntries
      : [fallbackOrEntries];
    if (fallbackEntries.length) {
      await reduceEnvVarValues(fallbackEntries, acc, fallbacks);
    }
    acc[name] = fallbackValue;
    if (acc[name] !== envValue) {
      fallbacks.push([name, acc[name] ?? ""]);
    }
    return acc;
  }, Promise.resolve(result));
}

/**
 *
 * @param {{
 *  filePath: string,
 *  devEnv: Record<string,string>,
 *  source?: string,
 *  title?: string,
 *  newline?: string
 * }} options
 */
export async function addDevEnvToFile({
  filePath,
  devEnv,
  source = "/packages/scripts/src/dev-env.js",
  title = `# AUTOGENERATED BY ${source} -- DO NOT EDIT BELOW THIS LINE`,
  newline = "\n",
}) {
  let file;
  try {
    file = await fs.open(filePath, fs.constants.O_RDWR | fs.constants.O_CREAT);
    const previousContents = (await file.readFile("utf8")).replace(/\r/g, "");
    const prefix = previousContents.includes(title)
      ? previousContents.slice(0, previousContents.indexOf(title))
      : previousContents;

    const contents = [
      prefix.replace(new RegExp(`${newline}{0,}$`), newline.repeat(2)),
      title,
      newline,
      ...Object.entries(devEnv)
        .map(([key, value]) => `${key}=${value}`)
        .join(newline),
      newline,
    ].join("");
    const written = await file.write(contents, 0, "utf8");
    await file.truncate(written.bytesWritten);
  } finally {
    await file?.close();
  }
}
